// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ApiVersion, apiVersion } from './api-version';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createWebhookRequest = z.lazy(() => {
  return z.object({
    url: z.string(),
    clientVolunteeringPlatformId: z.string(),
    apiVersion: apiVersion,
    authStrategy: z.any(),
    authCredentials: z.any().optional(),
  });
});

/**
 *
 * @typedef  {CreateWebhookRequest} createWebhookRequest
 * @property {string}
 * @property {string}
 * @property {ApiVersion}
 * @property {any}
 * @property {any}
 */
export type CreateWebhookRequest = z.infer<typeof createWebhookRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createWebhookRequestResponse = z.lazy(() => {
  return z
    .object({
      url: z.string(),
      clientVolunteeringPlatformId: z.string(),
      apiVersion: apiVersion,
      authStrategy: z.any(),
      authCredentials: z.any().optional(),
    })
    .transform((data) => ({
      url: data['url'],
      clientVolunteeringPlatformId: data['clientVolunteeringPlatformId'],
      apiVersion: data['apiVersion'],
      authStrategy: data['authStrategy'],
      authCredentials: data['authCredentials'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createWebhookRequestRequest = z.lazy(() => {
  return z
    .object({
      url: z.string(),
      clientVolunteeringPlatformId: z.string(),
      apiVersion: apiVersion,
      authStrategy: z.any(),
      authCredentials: z.any().optional(),
    })
    .transform((data) => ({
      url: data['url'],
      clientVolunteeringPlatformId: data['clientVolunteeringPlatformId'],
      apiVersion: data['apiVersion'],
      authStrategy: data['authStrategy'],
      authCredentials: data['authCredentials'],
    }));
});
