// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateWebhookRequest = z.lazy(() => {
  return z.object({
    url: z.string().optional(),
    apiVersion: z.string().optional(),
    authStrategy: z.string().optional(),
    authCredentials: z.any().optional(),
  });
});

/**
 *
 * @typedef  {UpdateWebhookRequest} updateWebhookRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {any}
 */
export type UpdateWebhookRequest = z.infer<typeof updateWebhookRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWebhookRequestResponse = z.lazy(() => {
  return z
    .object({
      url: z.string().optional(),
      apiVersion: z.string().optional(),
      authStrategy: z.string().optional(),
      authCredentials: z.any().optional(),
    })
    .transform((data) => ({
      url: data['url'],
      apiVersion: data['apiVersion'],
      authStrategy: data['authStrategy'],
      authCredentials: data['authCredentials'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWebhookRequestRequest = z.lazy(() => {
  return z
    .object({
      url: z.string().optional(),
      apiVersion: z.string().optional(),
      authStrategy: z.string().optional(),
      authCredentials: z.any().optional(),
    })
    .transform((data) => ({
      url: data['url'],
      apiVersion: data['apiVersion'],
      authStrategy: data['authStrategy'],
      authCredentials: data['authCredentials'],
    }));
});
