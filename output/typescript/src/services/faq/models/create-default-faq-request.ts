// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createDefaultFaqRequest = z.lazy(() => {
  return z.object({
    hidden: z.any().optional(),
    faqVariants: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateDefaultFaqRequest} createDefaultFaqRequest
 * @property {any}
 * @property {string[]}
 */
export type CreateDefaultFaqRequest = z.infer<typeof createDefaultFaqRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createDefaultFaqRequestResponse = z.lazy(() => {
  return z
    .object({
      hidden: z.any().optional(),
      faqVariants: z.array(z.string()),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createDefaultFaqRequestRequest = z.lazy(() => {
  return z
    .object({
      hidden: z.any().optional(),
      faqVariants: z.array(z.string()),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});
