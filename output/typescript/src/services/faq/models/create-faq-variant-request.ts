// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createFaqVariantRequest = z.lazy(() => {
  return z.object({
    locale: z.string(),
    question: z.string(),
    answer: z.string(),
  });
});

/**
 *
 * @typedef  {CreateFaqVariantRequest} createFaqVariantRequest
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateFaqVariantRequest = z.infer<typeof createFaqVariantRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createFaqVariantRequestResponse = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      question: z.string(),
      answer: z.string(),
    })
    .transform((data) => ({
      locale: data['locale'],
      question: data['question'],
      answer: data['answer'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createFaqVariantRequestRequest = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      question: z.string(),
      answer: z.string(),
    })
    .transform((data) => ({
      locale: data['locale'],
      question: data['question'],
      answer: data['answer'],
    }));
});
