// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateFaqRequest = z.lazy(() => {
  return z.object({
    hidden: z.boolean().optional(),
    faqVariants: z.array(z.string()).optional(),
  });
});

/**
 *
 * @typedef  {UpdateFaqRequest} updateFaqRequest
 * @property {boolean}
 * @property {string[]}
 */
export type UpdateFaqRequest = z.infer<typeof updateFaqRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateFaqRequestResponse = z.lazy(() => {
  return z
    .object({
      hidden: z.boolean().optional(),
      faqVariants: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateFaqRequestRequest = z.lazy(() => {
  return z
    .object({
      hidden: z.boolean().optional(),
      faqVariants: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});
