// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createFaqRequest = z.lazy(() => {
  return z.object({
    clientId: z.any(),
    hidden: z.any(),
    faqVariants: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateFaqRequest} createFaqRequest
 * @property {any}
 * @property {any}
 * @property {string[]}
 */
export type CreateFaqRequest = z.infer<typeof createFaqRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createFaqRequestResponse = z.lazy(() => {
  return z
    .object({
      clientId: z.any(),
      hidden: z.any(),
      faqVariants: z.array(z.string()),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createFaqRequestRequest = z.lazy(() => {
  return z
    .object({
      clientId: z.any(),
      hidden: z.any(),
      faqVariants: z.array(z.string()),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      hidden: data['hidden'],
      faqVariants: data['faqVariants'],
    }));
});
