// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createHostChecklistResponseReq = z.lazy(() => {
  return z.object({
    key: z.string(),
    eventId: z.string(),
    isChecked: z.boolean(),
  });
});

/**
 *
 * @typedef  {CreateHostChecklistResponseReq} createHostChecklistResponseReq
 * @property {string}
 * @property {string}
 * @property {boolean}
 */
export type CreateHostChecklistResponseReq = z.infer<typeof createHostChecklistResponseReq>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createHostChecklistResponseReqResponse = z.lazy(() => {
  return z
    .object({
      key: z.string(),
      eventId: z.string(),
      isChecked: z.boolean(),
    })
    .transform((data) => ({
      key: data['key'],
      eventId: data['eventId'],
      isChecked: data['isChecked'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createHostChecklistResponseReqRequest = z.lazy(() => {
  return z
    .object({
      key: z.string(),
      eventId: z.string(),
      isChecked: z.boolean(),
    })
    .transform((data) => ({
      key: data['key'],
      eventId: data['eventId'],
      isChecked: data['isChecked'],
    }));
});
