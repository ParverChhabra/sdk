// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreateBookingSessionRequestProvider,
  createBookingSessionRequestProvider,
} from './create-booking-session-request-provider';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createBookingSessionRequest = z.lazy(() => {
  return z.object({
    thirdPartyId: z.string().optional(),
    url: z.string().optional(),
    provider: createBookingSessionRequestProvider,
  });
});

/**
 *
 * @typedef  {CreateBookingSessionRequest} createBookingSessionRequest
 * @property {string}
 * @property {string}
 * @property {CreateBookingSessionRequestProvider}
 */
export type CreateBookingSessionRequest = z.infer<typeof createBookingSessionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createBookingSessionRequestResponse = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string().optional(),
      url: z.string().optional(),
      provider: createBookingSessionRequestProvider,
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      url: data['url'],
      provider: data['provider'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createBookingSessionRequestRequest = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string().optional(),
      url: z.string().optional(),
      provider: createBookingSessionRequestProvider,
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      url: data['url'],
      provider: data['provider'],
    }));
});
