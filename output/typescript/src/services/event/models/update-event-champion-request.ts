// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { UpdateEventChampionRequestRole, updateEventChampionRequestRole } from './update-event-champion-request-role';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEventChampionRequest = z.lazy(() => {
  return z.object({
    email: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    role: updateEventChampionRequestRole.optional(),
    phone: z.string().optional(),
    isdCode: z.string().optional(),
  });
});

/**
 *
 * @typedef  {UpdateEventChampionRequest} updateEventChampionRequest
 * @property {string} - Email of the champion
 * @property {string} - First name of the champion
 * @property {string} - Last name of the champion
 * @property {UpdateEventChampionRequestRole} - Role of the champion
 * @property {string} - Phone number of the champion
 * @property {string} - ISD code
 */
export type UpdateEventChampionRequest = z.infer<typeof updateEventChampionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventChampionRequestResponse = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      role: updateEventChampionRequestRole.optional(),
      phone: z.string().optional(),
      isdCode: z.string().optional(),
    })
    .transform((data) => ({
      email: data['email'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      role: data['role'],
      phone: data['phone'],
      isdCode: data['isdCode'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventChampionRequestRequest = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      role: updateEventChampionRequestRole.optional(),
      phone: z.string().optional(),
      isdCode: z.string().optional(),
    })
    .transform((data) => ({
      email: data['email'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      role: data['role'],
      phone: data['phone'],
      isdCode: data['isdCode'],
    }));
});
