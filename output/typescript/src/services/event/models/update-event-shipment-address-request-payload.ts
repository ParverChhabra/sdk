// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  UpdateShipmentAddress,
  updateShipmentAddress,
  updateShipmentAddressRequest,
  updateShipmentAddressResponse,
} from '../../common/update-shipment-address';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEventShipmentAddressRequestPayload = z.lazy(() => {
  return z.object({
    entityId: z.string(),
    addressType: z.string(),
    address: updateShipmentAddress,
  });
});

/**
 *
 * @typedef  {UpdateEventShipmentAddressRequestPayload} updateEventShipmentAddressRequestPayload
 * @property {string} - Event Shipment ID
 * @property {string} - Address Type
 * @property {UpdateShipmentAddress}
 */
export type UpdateEventShipmentAddressRequestPayload = z.infer<typeof updateEventShipmentAddressRequestPayload>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventShipmentAddressRequestPayloadResponse = z.lazy(() => {
  return z
    .object({
      entityId: z.string(),
      addressType: z.string(),
      address: updateShipmentAddressResponse,
    })
    .transform((data) => ({
      entityId: data['entityId'],
      addressType: data['addressType'],
      address: data['address'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventShipmentAddressRequestPayloadRequest = z.lazy(() => {
  return z
    .object({
      entityId: z.string(),
      addressType: z.string(),
      address: updateShipmentAddressRequest,
    })
    .transform((data) => ({
      entityId: data['entityId'],
      addressType: data['addressType'],
      address: data['address'],
    }));
});
