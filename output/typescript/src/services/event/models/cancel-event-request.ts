// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const cancelEventRequest = z.lazy(() => {
  return z.object({
    reason: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CancelEventRequest} cancelEventRequest
 * @property {string} - The reason for canceling the event
 */
export type CancelEventRequest = z.infer<typeof cancelEventRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const cancelEventRequestResponse = z.lazy(() => {
  return z
    .object({
      reason: z.string().optional(),
    })
    .transform((data) => ({
      reason: data['reason'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const cancelEventRequestRequest = z.lazy(() => {
  return z
    .object({
      reason: z.string().optional(),
    })
    .transform((data) => ({
      reason: data['reason'],
    }));
});
