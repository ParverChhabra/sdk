// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Source, source } from './source';

/**
 * The shape of the model inside the application code - what the users use
 */
export const upsertEventMeetAndGreetDto = z.lazy(() => {
  return z.object({
    isDone: z.boolean(),
    source: source,
    summary: z.string(),
    completionScore: z.number(),
  });
});

/**
 *
 * @typedef  {UpsertEventMeetAndGreetDto} upsertEventMeetAndGreetDto
 * @property {boolean} - Whether the meet and greet is done
 * @property {Source} - Source of the meet and greet update
 * @property {string} - Summary of the meet and greet
 * @property {number} - Completion score of the meet and greet
 */
export type UpsertEventMeetAndGreetDto = z.infer<typeof upsertEventMeetAndGreetDto>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const upsertEventMeetAndGreetDtoResponse = z.lazy(() => {
  return z
    .object({
      isDone: z.boolean(),
      source: source,
      summary: z.string(),
      completionScore: z.number(),
    })
    .transform((data) => ({
      isDone: data['isDone'],
      source: data['source'],
      summary: data['summary'],
      completionScore: data['completionScore'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const upsertEventMeetAndGreetDtoRequest = z.lazy(() => {
  return z
    .object({
      isDone: z.boolean(),
      source: source,
      summary: z.string(),
      completionScore: z.number(),
    })
    .transform((data) => ({
      isDone: data['isDone'],
      source: data['source'],
      summary: data['summary'],
      completionScore: data['completionScore'],
    }));
});
