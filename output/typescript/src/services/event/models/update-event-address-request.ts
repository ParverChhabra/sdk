// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEventAddressRequest = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    line1: z.string(),
    line2: z.string().optional(),
    recipientName: z.string().optional(),
    email: z.string().optional(),
    phoneNumber: z.string().optional(),
    isdCode: z.string().optional(),
    title: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    city: z.string(),
    province: z.string().optional(),
    postalCode: z.string().optional(),
    country: z.string(),
    countryCode: z.string(),
    url: z.string().optional(),
    metadata: z.any().optional(),
  });
});

/**
 *
 * @typedef  {UpdateEventAddressRequest} updateEventAddressRequest
 * @property {string} - ID of the address
 * @property {string} - First line of the address
 * @property {string} - Second line of the address
 * @property {string} - Name of the recipient
 * @property {string} - Email of the recipient
 * @property {string} - Phone number of the recipient
 * @property {string} - ISD code
 * @property {string} - Title of the address
 * @property {string} - Latitude coordinate
 * @property {string} - Longitude coordinate
 * @property {string} - City of the address
 * @property {string} - Province of the address
 * @property {string} - Postal code of the address
 * @property {string} - Country of the address
 * @property {string} - Country of the address
 * @property {string} - URL of the address
 * @property {any} - Metadata for the address
 */
export type UpdateEventAddressRequest = z.infer<typeof updateEventAddressRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventAddressRequestResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      line1: z.string(),
      line2: z.string().optional(),
      recipientName: z.string().optional(),
      email: z.string().optional(),
      phoneNumber: z.string().optional(),
      isdCode: z.string().optional(),
      title: z.string().optional(),
      latitude: z.string().optional(),
      longitude: z.string().optional(),
      city: z.string(),
      province: z.string().optional(),
      postalCode: z.string().optional(),
      country: z.string(),
      countryCode: z.string(),
      url: z.string().optional(),
      metadata: z.any().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      line1: data['line1'],
      line2: data['line2'],
      recipientName: data['recipientName'],
      email: data['email'],
      phoneNumber: data['phoneNumber'],
      isdCode: data['isdCode'],
      title: data['title'],
      latitude: data['latitude'],
      longitude: data['longitude'],
      city: data['city'],
      province: data['province'],
      postalCode: data['postalCode'],
      country: data['country'],
      countryCode: data['countryCode'],
      url: data['url'],
      metadata: data['metadata'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventAddressRequestRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      line1: z.string(),
      line2: z.string().optional(),
      recipientName: z.string().optional(),
      email: z.string().optional(),
      phoneNumber: z.string().optional(),
      isdCode: z.string().optional(),
      title: z.string().optional(),
      latitude: z.string().optional(),
      longitude: z.string().optional(),
      city: z.string(),
      province: z.string().optional(),
      postalCode: z.string().optional(),
      country: z.string(),
      countryCode: z.string(),
      url: z.string().optional(),
      metadata: z.any().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      line1: data['line1'],
      line2: data['line2'],
      recipientName: data['recipientName'],
      email: data['email'],
      phoneNumber: data['phoneNumber'],
      isdCode: data['isdCode'],
      title: data['title'],
      latitude: data['latitude'],
      longitude: data['longitude'],
      city: data['city'],
      province: data['province'],
      postalCode: data['postalCode'],
      country: data['country'],
      countryCode: data['countryCode'],
      url: data['url'],
      metadata: data['metadata'],
    }));
});
