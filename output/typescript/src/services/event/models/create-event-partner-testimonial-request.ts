// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventPartnerTestimonialRequest = z.lazy(() => {
  return z.object({
    beneficiariesImpacted: z.number().optional(),
    impactStatement: z.string().optional(),
    feedback: z.string().optional(),
    context: z.string().optional(),
    media: z.any().optional(),
  });
});

/**
 *
 * @typedef  {CreateEventPartnerTestimonialRequest} createEventPartnerTestimonialRequest
 * @property {number} - Beneficiaries impacted
 * @property {string} - Impact statement
 * @property {string} - NPO Feedback
 * @property {string} - Testimonial context
 * @property {any} - Testimonial media
 */
export type CreateEventPartnerTestimonialRequest = z.infer<typeof createEventPartnerTestimonialRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventPartnerTestimonialRequestResponse = z.lazy(() => {
  return z
    .object({
      beneficiariesImpacted: z.number().optional(),
      impactStatement: z.string().optional(),
      feedback: z.string().optional(),
      context: z.string().optional(),
      media: z.any().optional(),
    })
    .transform((data) => ({
      beneficiariesImpacted: data['beneficiariesImpacted'],
      impactStatement: data['impactStatement'],
      feedback: data['feedback'],
      context: data['context'],
      media: data['media'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventPartnerTestimonialRequestRequest = z.lazy(() => {
  return z
    .object({
      beneficiariesImpacted: z.number().optional(),
      impactStatement: z.string().optional(),
      feedback: z.string().optional(),
      context: z.string().optional(),
      media: z.any().optional(),
    })
    .transform((data) => ({
      beneficiariesImpacted: data['beneficiariesImpacted'],
      impactStatement: data['impactStatement'],
      feedback: data['feedback'],
      context: data['context'],
      media: data['media'],
    }));
});
