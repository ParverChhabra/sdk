// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { InvitationStatus, invitationStatus } from './invitation-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEventHostRequest = z.lazy(() => {
  return z.object({
    invitationStatus: invitationStatus.optional(),
    calendarInviteId: z.string(),
    currency: z.string().optional(),
    modeOfPayment: z.string().optional(),
    hostingCost: z.number().optional(),
    translationCost: z.number().optional(),
    preEventShipmentCost: z.number().optional(),
    postEventShipmentCost: z.number().optional(),
    travelReimbursementCost: z.number().optional(),
    projectManagementCost: z.number().optional(),
  });
});

/**
 *
 * @typedef  {UpdateEventHostRequest} updateEventHostRequest
 * @property {InvitationStatus} - The invitation status of the event host
 * @property {string} - The calendar invite ID of the event host
 * @property {string} - The currency used by the event host
 * @property {string} - The mode of payment for the event host
 * @property {number} - The hosting cost for the event
 * @property {number} - The translation cost for the event
 * @property {number} - The pre-event shipment cost
 * @property {number} - The post-event shipment cost
 * @property {number} - The travel reimbursement cost
 * @property {number} - The project management cost
 */
export type UpdateEventHostRequest = z.infer<typeof updateEventHostRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventHostRequestResponse = z.lazy(() => {
  return z
    .object({
      invitationStatus: invitationStatus.optional(),
      calendarInviteId: z.string(),
      currency: z.string().optional(),
      modeOfPayment: z.string().optional(),
      hostingCost: z.number().optional(),
      translationCost: z.number().optional(),
      preEventShipmentCost: z.number().optional(),
      postEventShipmentCost: z.number().optional(),
      travelReimbursementCost: z.number().optional(),
      projectManagementCost: z.number().optional(),
    })
    .transform((data) => ({
      invitationStatus: data['invitationStatus'],
      calendarInviteId: data['calendarInviteId'],
      currency: data['currency'],
      modeOfPayment: data['modeOfPayment'],
      hostingCost: data['hostingCost'],
      translationCost: data['translationCost'],
      preEventShipmentCost: data['preEventShipmentCost'],
      postEventShipmentCost: data['postEventShipmentCost'],
      travelReimbursementCost: data['travelReimbursementCost'],
      projectManagementCost: data['projectManagementCost'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventHostRequestRequest = z.lazy(() => {
  return z
    .object({
      invitationStatus: invitationStatus.optional(),
      calendarInviteId: z.string(),
      currency: z.string().optional(),
      modeOfPayment: z.string().optional(),
      hostingCost: z.number().optional(),
      translationCost: z.number().optional(),
      preEventShipmentCost: z.number().optional(),
      postEventShipmentCost: z.number().optional(),
      travelReimbursementCost: z.number().optional(),
      projectManagementCost: z.number().optional(),
    })
    .transform((data) => ({
      invitationStatus: data['invitationStatus'],
      calendarInviteId: data['calendarInviteId'],
      currency: data['currency'],
      modeOfPayment: data['modeOfPayment'],
      hostingCost: data['hostingCost'],
      translationCost: data['translationCost'],
      preEventShipmentCost: data['preEventShipmentCost'],
      postEventShipmentCost: data['postEventShipmentCost'],
      travelReimbursementCost: data['travelReimbursementCost'],
      projectManagementCost: data['projectManagementCost'],
    }));
});
