// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventMeetingSessionRequest = z.lazy(() => {
  return z.object({
    thirdPartyId: z.string(),
    registrationRequired: z.boolean(),
    passcode: z.string(),
    url: z.string(),
  });
});

/**
 *
 * @typedef  {CreateEventMeetingSessionRequest} createEventMeetingSessionRequest
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {string}
 */
export type CreateEventMeetingSessionRequest = z.infer<typeof createEventMeetingSessionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventMeetingSessionRequestResponse = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string(),
      registrationRequired: z.boolean(),
      passcode: z.string(),
      url: z.string(),
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      registrationRequired: data['registrationRequired'],
      passcode: data['passcode'],
      url: data['url'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventMeetingSessionRequestRequest = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string(),
      registrationRequired: z.boolean(),
      passcode: z.string(),
      url: z.string(),
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      registrationRequired: data['registrationRequired'],
      passcode: data['passcode'],
      url: data['url'],
    }));
});
