// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreateEventAddressRequest,
  createEventAddressRequest,
  createEventAddressRequestRequest,
  createEventAddressRequestResponse,
} from './create-event-address-request';
import {
  CreateEventChampionRequest,
  createEventChampionRequest,
  createEventChampionRequestRequest,
  createEventChampionRequestResponse,
} from './create-event-champion-request';
import {
  CreateEventMeetingSessionRequest,
  createEventMeetingSessionRequest,
  createEventMeetingSessionRequestRequest,
  createEventMeetingSessionRequestResponse,
} from './create-event-meeting-session-request';
import {
  CreateBookingSessionRequest,
  createBookingSessionRequest,
  createBookingSessionRequestRequest,
  createBookingSessionRequestResponse,
} from './create-booking-session-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventRequest = z.lazy(() => {
  return z.object({
    opportunityId: z.string(),
    variantId: z.string(),
    partnerId: z.string(),
    isAsync: z.any().optional(),
    address: createEventAddressRequest.optional(),
    champion: createEventChampionRequest,
    countryId: z.string(),
    cityId: z.string().optional(),
    startTimeStamp: z.string(),
    endTimeStamp: z.string(),
    timezone: z.string(),
    language: z.string(),
    csmId: z.string().optional(),
    programManagerId: z.string().optional(),
    expectedVolunteerCount: z.number(),
    tags: z.array(z.string()).optional(),
    name: z.string().optional(),
    meetingSession: createEventMeetingSessionRequest.optional(),
    customCalendarDescription: z.string().optional(),
    othersTagDescription: z.string().optional(),
    customCalendarTitle: z.string().optional(),
    bookingSession: createBookingSessionRequest.optional(),
    championResponses: z.any().optional(),
    source: z.string().optional(),
    submissionDeadline: z.number().optional(),
  });
});

/**
 *
 * @typedef  {CreateEventRequest} createEventRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {any}
 * @property {CreateEventAddressRequest}
 * @property {CreateEventChampionRequest}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string[]}
 * @property {string}
 * @property {CreateEventMeetingSessionRequest}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {CreateBookingSessionRequest}
 * @property {any}
 * @property {string}
 * @property {number}
 */
export type CreateEventRequest = z.infer<typeof createEventRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventRequestResponse = z.lazy(() => {
  return z
    .object({
      opportunityId: z.string(),
      variantId: z.string(),
      partnerId: z.string(),
      isAsync: z.any().optional(),
      address: createEventAddressRequestResponse.optional(),
      champion: createEventChampionRequestResponse,
      countryId: z.string(),
      cityId: z.string().optional(),
      startTimeStamp: z.string(),
      endTimeStamp: z.string(),
      timezone: z.string(),
      language: z.string(),
      csmId: z.string().optional(),
      programManagerId: z.string().optional(),
      expectedVolunteerCount: z.number(),
      tags: z.array(z.string()).optional(),
      name: z.string().optional(),
      meetingSession: createEventMeetingSessionRequestResponse.optional(),
      customCalendarDescription: z.string().optional(),
      othersTagDescription: z.string().optional(),
      customCalendarTitle: z.string().optional(),
      bookingSession: createBookingSessionRequestResponse.optional(),
      championResponses: z.any().optional(),
      source: z.string().optional(),
      submissionDeadline: z.number().optional(),
    })
    .transform((data) => ({
      opportunityId: data['opportunityId'],
      variantId: data['variantId'],
      partnerId: data['partnerId'],
      isAsync: data['isAsync'],
      address: data['address'],
      champion: data['champion'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      language: data['language'],
      csmId: data['csmId'],
      programManagerId: data['programManagerId'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
      tags: data['tags'],
      name: data['name'],
      meetingSession: data['meetingSession'],
      customCalendarDescription: data['customCalendarDescription'],
      othersTagDescription: data['othersTagDescription'],
      customCalendarTitle: data['customCalendarTitle'],
      bookingSession: data['bookingSession'],
      championResponses: data['championResponses'],
      source: data['source'],
      submissionDeadline: data['submissionDeadline'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventRequestRequest = z.lazy(() => {
  return z
    .object({
      opportunityId: z.string(),
      variantId: z.string(),
      partnerId: z.string(),
      isAsync: z.any().optional(),
      address: createEventAddressRequestRequest.optional(),
      champion: createEventChampionRequestRequest,
      countryId: z.string(),
      cityId: z.string().optional(),
      startTimeStamp: z.string(),
      endTimeStamp: z.string(),
      timezone: z.string(),
      language: z.string(),
      csmId: z.string().optional(),
      programManagerId: z.string().optional(),
      expectedVolunteerCount: z.number(),
      tags: z.array(z.string()).optional(),
      name: z.string().optional(),
      meetingSession: createEventMeetingSessionRequestRequest.optional(),
      customCalendarDescription: z.string().optional(),
      othersTagDescription: z.string().optional(),
      customCalendarTitle: z.string().optional(),
      bookingSession: createBookingSessionRequestRequest.optional(),
      championResponses: z.any().optional(),
      source: z.string().optional(),
      submissionDeadline: z.number().optional(),
    })
    .transform((data) => ({
      opportunityId: data['opportunityId'],
      variantId: data['variantId'],
      partnerId: data['partnerId'],
      isAsync: data['isAsync'],
      address: data['address'],
      champion: data['champion'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      language: data['language'],
      csmId: data['csmId'],
      programManagerId: data['programManagerId'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
      tags: data['tags'],
      name: data['name'],
      meetingSession: data['meetingSession'],
      customCalendarDescription: data['customCalendarDescription'],
      othersTagDescription: data['othersTagDescription'],
      customCalendarTitle: data['customCalendarTitle'],
      bookingSession: data['bookingSession'],
      championResponses: data['championResponses'],
      source: data['source'],
      submissionDeadline: data['submissionDeadline'],
    }));
});
