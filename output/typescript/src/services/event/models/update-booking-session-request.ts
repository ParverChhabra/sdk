// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  UpdateBookingSessionRequestProvider,
  updateBookingSessionRequestProvider,
} from './update-booking-session-request-provider';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateBookingSessionRequest = z.lazy(() => {
  return z.object({
    thirdPartyId: z.string().optional(),
    url: z.string().optional(),
    provider: updateBookingSessionRequestProvider.optional(),
  });
});

/**
 *
 * @typedef  {UpdateBookingSessionRequest} updateBookingSessionRequest
 * @property {string} - Third party ID for the booking session
 * @property {string} - URL for the booking session
 * @property {UpdateBookingSessionRequestProvider} - Provider for the booking session
 */
export type UpdateBookingSessionRequest = z.infer<typeof updateBookingSessionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateBookingSessionRequestResponse = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string().optional(),
      url: z.string().optional(),
      provider: updateBookingSessionRequestProvider.optional(),
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      url: data['url'],
      provider: data['provider'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateBookingSessionRequestRequest = z.lazy(() => {
  return z
    .object({
      thirdPartyId: z.string().optional(),
      url: z.string().optional(),
      provider: updateBookingSessionRequestProvider.optional(),
    })
    .transform((data) => ({
      thirdPartyId: data['thirdPartyId'],
      url: data['url'],
      provider: data['provider'],
    }));
});
