// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateQuestionRequest = z.lazy(() => {
  return z.object({
    type: z.string().optional(),
    eventLocation: z.string().optional(),
    fieldName: z.string().optional(),
    isRequired: z.boolean().optional(),
    hidden: z.any().optional(),
    validationMetadata: z.any().optional(),
    variants: z.array(z.string()).optional(),
  });
});

/**
 *
 * @typedef  {UpdateQuestionRequest} updateQuestionRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {any}
 * @property {any}
 * @property {string[]}
 */
export type UpdateQuestionRequest = z.infer<typeof updateQuestionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateQuestionRequestResponse = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      eventLocation: z.string().optional(),
      fieldName: z.string().optional(),
      isRequired: z.boolean().optional(),
      hidden: z.any().optional(),
      validationMetadata: z.any().optional(),
      variants: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      type: data['type'],
      eventLocation: data['eventLocation'],
      fieldName: data['fieldName'],
      isRequired: data['isRequired'],
      hidden: data['hidden'],
      validationMetadata: data['validationMetadata'],
      variants: data['variants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateQuestionRequestRequest = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      eventLocation: z.string().optional(),
      fieldName: z.string().optional(),
      isRequired: z.boolean().optional(),
      hidden: z.any().optional(),
      validationMetadata: z.any().optional(),
      variants: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      type: data['type'],
      eventLocation: data['eventLocation'],
      fieldName: data['fieldName'],
      isRequired: data['isRequired'],
      hidden: data['hidden'],
      validationMetadata: data['validationMetadata'],
      variants: data['variants'],
    }));
});
