// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createQuestionVariantRequest = z.lazy(() => {
  return z.object({
    locale: z.string(),
    question: z.string(),
    placeholder: z.string(),
    options: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateQuestionVariantRequest} createQuestionVariantRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateQuestionVariantRequest = z.infer<typeof createQuestionVariantRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createQuestionVariantRequestResponse = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      question: z.string(),
      placeholder: z.string(),
      options: z.string().optional(),
    })
    .transform((data) => ({
      locale: data['locale'],
      question: data['question'],
      placeholder: data['placeholder'],
      options: data['options'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createQuestionVariantRequestRequest = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      question: z.string(),
      placeholder: z.string(),
      options: z.string().optional(),
    })
    .transform((data) => ({
      locale: data['locale'],
      question: data['question'],
      placeholder: data['placeholder'],
      options: data['options'],
    }));
});
