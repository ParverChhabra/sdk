// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventFromChampions = z.lazy(() => {
  return z.object({
    opportunityId: z.string(),
    variantId: z.string(),
    partnerId: z.string(),
    startTimeStamp: z.string(),
    endTimeStamp: z.string(),
    timezone: z.string(),
    language: z.string(),
    expectedVolunteerCount: z.number(),
  });
});

/**
 *
 * @typedef  {CreateEventFromChampions} createEventFromChampions
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 */
export type CreateEventFromChampions = z.infer<typeof createEventFromChampions>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventFromChampionsResponse = z.lazy(() => {
  return z
    .object({
      opportunityId: z.string(),
      variantId: z.string(),
      partnerId: z.string(),
      startTimeStamp: z.string(),
      endTimeStamp: z.string(),
      timezone: z.string(),
      language: z.string(),
      expectedVolunteerCount: z.number(),
    })
    .transform((data) => ({
      opportunityId: data['opportunityId'],
      variantId: data['variantId'],
      partnerId: data['partnerId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      language: data['language'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventFromChampionsRequest = z.lazy(() => {
  return z
    .object({
      opportunityId: z.string(),
      variantId: z.string(),
      partnerId: z.string(),
      startTimeStamp: z.string(),
      endTimeStamp: z.string(),
      timezone: z.string(),
      language: z.string(),
      expectedVolunteerCount: z.number(),
    })
    .transform((data) => ({
      opportunityId: data['opportunityId'],
      variantId: data['variantId'],
      partnerId: data['partnerId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      language: data['language'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
    }));
});
