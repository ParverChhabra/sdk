// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreateMaterialItemRequest,
  createMaterialItemRequest,
  createMaterialItemRequestRequest,
  createMaterialItemRequestResponse,
} from '../../common/create-material-item-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateBoxRequest = z.lazy(() => {
  return z.object({
    title: z.string().optional(),
    numberOfKits: z.number().optional(),
    label: z.string().optional(),
    imgUrl: z.string().optional(),
    trackingId: z.string().optional(),
    trackingLink: z.string().optional(),
    height: z.number().optional(),
    length: z.number().optional(),
    breadth: z.number().optional(),
    weight: z.number().optional(),
    note: z.string().optional(),
    materialList: z.array(createMaterialItemRequest).optional(),
  });
});

/**
 *
 * @typedef  {UpdateBoxRequest} updateBoxRequest
 * @property {string} - Title of the box
 * @property {number} - Number of kits in the box
 * @property {string} - Label for the box
 * @property {string} - Image URL of the box
 * @property {string} - Tracking ID of the box
 * @property {string} - Tracking link of the box
 * @property {number} - Height of the box
 * @property {number} - Length of the box
 * @property {number} - Breadth of the box
 * @property {number} - Weight of the box
 * @property {string} - Note related to the box
 * @property {CreateMaterialItemRequest[]} - List of materials in the box
 */
export type UpdateBoxRequest = z.infer<typeof updateBoxRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateBoxRequestResponse = z.lazy(() => {
  return z
    .object({
      title: z.string().optional(),
      numberOfKits: z.number().optional(),
      label: z.string().optional(),
      imgUrl: z.string().optional(),
      trackingId: z.string().optional(),
      trackingLink: z.string().optional(),
      height: z.number().optional(),
      length: z.number().optional(),
      breadth: z.number().optional(),
      weight: z.number().optional(),
      note: z.string().optional(),
      materialList: z.array(createMaterialItemRequestResponse).optional(),
    })
    .transform((data) => ({
      title: data['title'],
      numberOfKits: data['numberOfKits'],
      label: data['label'],
      imgUrl: data['imgUrl'],
      trackingId: data['trackingId'],
      trackingLink: data['trackingLink'],
      height: data['height'],
      length: data['length'],
      breadth: data['breadth'],
      weight: data['weight'],
      note: data['note'],
      materialList: data['materialList'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateBoxRequestRequest = z.lazy(() => {
  return z
    .object({
      title: z.string().optional(),
      numberOfKits: z.number().optional(),
      label: z.string().optional(),
      imgUrl: z.string().optional(),
      trackingId: z.string().optional(),
      trackingLink: z.string().optional(),
      height: z.number().optional(),
      length: z.number().optional(),
      breadth: z.number().optional(),
      weight: z.number().optional(),
      note: z.string().optional(),
      materialList: z.array(createMaterialItemRequestRequest).optional(),
    })
    .transform((data) => ({
      title: data['title'],
      numberOfKits: data['numberOfKits'],
      label: data['label'],
      imgUrl: data['imgUrl'],
      trackingId: data['trackingId'],
      trackingLink: data['trackingLink'],
      height: data['height'],
      length: data['length'],
      breadth: data['breadth'],
      weight: data['weight'],
      note: data['note'],
      materialList: data['materialList'],
    }));
});
