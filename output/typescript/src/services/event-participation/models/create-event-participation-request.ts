// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventParticipationRequest = z.lazy(() => {
  return z.object({
    eventId: z.any(),
    finalCount: z.number(),
    takenFrom: z.string(),
    isHybrid: z.boolean().optional(),
    isVerified: z.boolean(),
    participants: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateEventParticipationRequest} createEventParticipationRequest
 * @property {any}
 * @property {number}
 * @property {string}
 * @property {boolean}
 * @property {boolean}
 * @property {string[]}
 */
export type CreateEventParticipationRequest = z.infer<typeof createEventParticipationRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventParticipationRequestResponse = z.lazy(() => {
  return z
    .object({
      eventId: z.any(),
      finalCount: z.number(),
      takenFrom: z.string(),
      isHybrid: z.boolean().optional(),
      isVerified: z.boolean(),
      participants: z.array(z.string()),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      finalCount: data['finalCount'],
      takenFrom: data['takenFrom'],
      isHybrid: data['isHybrid'],
      isVerified: data['isVerified'],
      participants: data['participants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventParticipationRequestRequest = z.lazy(() => {
  return z
    .object({
      eventId: z.any(),
      finalCount: z.number(),
      takenFrom: z.string(),
      isHybrid: z.boolean().optional(),
      isVerified: z.boolean(),
      participants: z.array(z.string()),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      finalCount: data['finalCount'],
      takenFrom: data['takenFrom'],
      isHybrid: data['isHybrid'],
      isVerified: data['isVerified'],
      participants: data['participants'],
    }));
});
