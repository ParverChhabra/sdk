// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createBannerVariantRequest = z.lazy(() => {
  return z.object({
    locale: z.string(),
    dWebUrl: z.string(),
    mWebUrl: z.string(),
    link: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateBannerVariantRequest} createBannerVariantRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateBannerVariantRequest = z.infer<typeof createBannerVariantRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createBannerVariantRequestResponse = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      dWebUrl: z.string(),
      mWebUrl: z.string(),
      link: z.string().optional(),
    })
    .transform((data) => ({
      locale: data['locale'],
      dWebUrl: data['dWebUrl'],
      mWebUrl: data['mWebUrl'],
      link: data['link'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createBannerVariantRequestRequest = z.lazy(() => {
  return z
    .object({
      locale: z.string(),
      dWebUrl: z.string(),
      mWebUrl: z.string(),
      link: z.string().optional(),
    })
    .transform((data) => ({
      locale: data['locale'],
      dWebUrl: data['dWebUrl'],
      mWebUrl: data['mWebUrl'],
      link: data['link'],
    }));
});
