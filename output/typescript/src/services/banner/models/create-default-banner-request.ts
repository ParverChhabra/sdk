// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createDefaultBannerRequest = z.lazy(() => {
  return z.object({
    hidden: z.any().optional(),
    type: z.string().optional(),
    bannerVariants: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateDefaultBannerRequest} createDefaultBannerRequest
 * @property {any}
 * @property {string}
 * @property {string[]}
 */
export type CreateDefaultBannerRequest = z.infer<typeof createDefaultBannerRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createDefaultBannerRequestResponse = z.lazy(() => {
  return z
    .object({
      hidden: z.any().optional(),
      type: z.string().optional(),
      bannerVariants: z.array(z.string()),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      type: data['type'],
      bannerVariants: data['bannerVariants'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createDefaultBannerRequestRequest = z.lazy(() => {
  return z
    .object({
      hidden: z.any().optional(),
      type: z.string().optional(),
      bannerVariants: z.array(z.string()),
    })
    .transform((data) => ({
      hidden: data['hidden'],
      type: data['type'],
      bannerVariants: data['bannerVariants'],
    }));
});
