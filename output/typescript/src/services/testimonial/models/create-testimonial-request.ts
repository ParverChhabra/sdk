// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createTestimonialRequest = z.lazy(() => {
  return z.object({
    clientId: z.any(),
    embedLink: z.string(),
    postLink: z.string(),
  });
});

/**
 *
 * @typedef  {CreateTestimonialRequest} createTestimonialRequest
 * @property {any}
 * @property {string}
 * @property {string}
 */
export type CreateTestimonialRequest = z.infer<typeof createTestimonialRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createTestimonialRequestResponse = z.lazy(() => {
  return z
    .object({
      clientId: z.any(),
      embedLink: z.string(),
      postLink: z.string(),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      embedLink: data['embedLink'],
      postLink: data['postLink'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createTestimonialRequestRequest = z.lazy(() => {
  return z
    .object({
      clientId: z.any(),
      embedLink: z.string(),
      postLink: z.string(),
    })
    .transform((data) => ({
      clientId: data['clientId'],
      embedLink: data['embedLink'],
      postLink: data['postLink'],
    }));
});
