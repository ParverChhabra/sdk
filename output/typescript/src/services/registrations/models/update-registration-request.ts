// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { QrEmailStatus, qrEmailStatus } from './qr-email-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateRegistrationRequest = z.lazy(() => {
  return z.object({
    calendarInviteId: z.string().optional(),
    qrEmailStatus: qrEmailStatus.optional(),
    qrUrl: z.string().optional(),
    attendanceMarkedAt: z.string().optional(),
  });
});

/**
 *
 * @typedef  {UpdateRegistrationRequest} updateRegistrationRequest
 * @property {string} - ID of the calendar invite associated with the registration
 * @property {QrEmailStatus} - Status of the QR email for the registration
 * @property {string} - URL of the QR code for the registration
 * @property {string} - Timestamp when the attendance was marked
 */
export type UpdateRegistrationRequest = z.infer<typeof updateRegistrationRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateRegistrationRequestResponse = z.lazy(() => {
  return z
    .object({
      calendarInviteId: z.string().optional(),
      qrEmailStatus: qrEmailStatus.optional(),
      qrUrl: z.string().optional(),
      attendanceMarkedAt: z.string().optional(),
    })
    .transform((data) => ({
      calendarInviteId: data['calendarInviteId'],
      qrEmailStatus: data['qrEmailStatus'],
      qrUrl: data['qrUrl'],
      attendanceMarkedAt: data['attendanceMarkedAt'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateRegistrationRequestRequest = z.lazy(() => {
  return z
    .object({
      calendarInviteId: z.string().optional(),
      qrEmailStatus: qrEmailStatus.optional(),
      qrUrl: z.string().optional(),
      attendanceMarkedAt: z.string().optional(),
    })
    .transform((data) => ({
      calendarInviteId: data['calendarInviteId'],
      qrEmailStatus: data['qrEmailStatus'],
      qrUrl: data['qrUrl'],
      attendanceMarkedAt: data['attendanceMarkedAt'],
    }));
});
