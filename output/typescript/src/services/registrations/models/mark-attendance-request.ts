// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const markAttendanceRequest = z.lazy(() => {
  return z.object({
    registrationId: z.any().optional(),
    email: z.string().optional(),
    eventId: z.any(),
  });
});

/**
 *
 * @typedef  {MarkAttendanceRequest} markAttendanceRequest
 * @property {any} - ID of the registration
 * @property {string} - Email of the customer
 * @property {any} - ID of the event
 */
export type MarkAttendanceRequest = z.infer<typeof markAttendanceRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const markAttendanceRequestResponse = z.lazy(() => {
  return z
    .object({
      registrationId: z.any().optional(),
      email: z.string().optional(),
      eventId: z.any(),
    })
    .transform((data) => ({
      registrationId: data['registrationId'],
      email: data['email'],
      eventId: data['eventId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const markAttendanceRequestRequest = z.lazy(() => {
  return z
    .object({
      registrationId: z.any().optional(),
      email: z.string().optional(),
      eventId: z.any(),
    })
    .transform((data) => ({
      registrationId: data['registrationId'],
      email: data['email'],
      eventId: data['eventId'],
    }));
});
