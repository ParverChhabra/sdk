// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createManyForEventRequest = z.lazy(() => {
  return z.object({
    emails: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateManyForEventRequest} createManyForEventRequest
 * @property {string[]} - List of emails to create for the event
 */
export type CreateManyForEventRequest = z.infer<typeof createManyForEventRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createManyForEventRequestResponse = z.lazy(() => {
  return z
    .object({
      emails: z.array(z.string()),
    })
    .transform((data) => ({
      emails: data['emails'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createManyForEventRequestRequest = z.lazy(() => {
  return z
    .object({
      emails: z.array(z.string()),
    })
    .transform((data) => ({
      emails: data['emails'],
    }));
});
