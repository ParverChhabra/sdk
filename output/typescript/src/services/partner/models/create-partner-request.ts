// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreatePartnerCorporateAddressRequest,
  createPartnerCorporateAddressRequest,
  createPartnerCorporateAddressRequestRequest,
  createPartnerCorporateAddressRequestResponse,
} from './create-partner-corporate-address-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createPartnerRequest = z.lazy(() => {
  return z.object({
    name: z.string(),
    description: z.string(),
    focusAreas: z.string().optional(),
    impactLocation: z.string().optional(),
    comments: z.string().optional(),
    isBenevity: z.boolean().optional(),
    charityRegNo: z.string().optional(),
    websiteUrl: z.string().optional(),
    videoUrl: z.string().optional(),
    languages: z.string().optional(),
    logoUrl: z.string().optional(),
    phoneNumber: z.string().optional(),
    isdCode: z.string().optional(),
    corporateAddress: createPartnerCorporateAddressRequest,
    pocEmail: z.string().optional(),
    pocNumber: z.string().optional(),
    pocName: z.string().optional(),
    gooderaPocId: z.string().optional(),
    countryId: z.string().optional(),
    nominationStatus: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreatePartnerRequest} createPartnerRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {CreatePartnerCorporateAddressRequest}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreatePartnerRequest = z.infer<typeof createPartnerRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createPartnerRequestResponse = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      description: z.string(),
      focusAreas: z.string().optional(),
      impactLocation: z.string().optional(),
      comments: z.string().optional(),
      isBenevity: z.boolean().optional(),
      charityRegNo: z.string().optional(),
      websiteUrl: z.string().optional(),
      videoUrl: z.string().optional(),
      languages: z.string().optional(),
      logoUrl: z.string().optional(),
      phoneNumber: z.string().optional(),
      isdCode: z.string().optional(),
      corporateAddress: createPartnerCorporateAddressRequestResponse,
      pocEmail: z.string().optional(),
      pocNumber: z.string().optional(),
      pocName: z.string().optional(),
      gooderaPocId: z.string().optional(),
      countryId: z.string().optional(),
      nominationStatus: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      description: data['description'],
      focusAreas: data['focusAreas'],
      impactLocation: data['impactLocation'],
      comments: data['comments'],
      isBenevity: data['isBenevity'],
      charityRegNo: data['charityRegNo'],
      websiteUrl: data['websiteUrl'],
      videoUrl: data['videoUrl'],
      languages: data['languages'],
      logoUrl: data['logoUrl'],
      phoneNumber: data['phoneNumber'],
      isdCode: data['isdCode'],
      corporateAddress: data['corporateAddress'],
      pocEmail: data['pocEmail'],
      pocNumber: data['pocNumber'],
      pocName: data['pocName'],
      gooderaPocId: data['gooderaPocId'],
      countryId: data['countryId'],
      nominationStatus: data['nominationStatus'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createPartnerRequestRequest = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      description: z.string(),
      focusAreas: z.string().optional(),
      impactLocation: z.string().optional(),
      comments: z.string().optional(),
      isBenevity: z.boolean().optional(),
      charityRegNo: z.string().optional(),
      websiteUrl: z.string().optional(),
      videoUrl: z.string().optional(),
      languages: z.string().optional(),
      logoUrl: z.string().optional(),
      phoneNumber: z.string().optional(),
      isdCode: z.string().optional(),
      corporateAddress: createPartnerCorporateAddressRequestRequest,
      pocEmail: z.string().optional(),
      pocNumber: z.string().optional(),
      pocName: z.string().optional(),
      gooderaPocId: z.string().optional(),
      countryId: z.string().optional(),
      nominationStatus: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      description: data['description'],
      focusAreas: data['focusAreas'],
      impactLocation: data['impactLocation'],
      comments: data['comments'],
      isBenevity: data['isBenevity'],
      charityRegNo: data['charityRegNo'],
      websiteUrl: data['websiteUrl'],
      videoUrl: data['videoUrl'],
      languages: data['languages'],
      logoUrl: data['logoUrl'],
      phoneNumber: data['phoneNumber'],
      isdCode: data['isdCode'],
      corporateAddress: data['corporateAddress'],
      pocEmail: data['pocEmail'],
      pocNumber: data['pocNumber'],
      pocName: data['pocName'],
      gooderaPocId: data['gooderaPocId'],
      countryId: data['countryId'],
      nominationStatus: data['nominationStatus'],
    }));
});
