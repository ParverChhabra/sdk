// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createChampionsConfigRequest = z.lazy(() => {
  return z.object({
    slug: z.string(),
    allowedConfirmItems: z.string().optional(),
    inPersonTat: z.any(),
    virtualTat: z.any(),
    charityFormLink: z.string().optional(),
    analyticsUrl: z.string().optional(),
    portalUrl: z.string().optional(),
    customBookingUrl: z.string().optional(),
    clientId: z.any(),
    showLogoOnChampionsPage: z.boolean().optional(),
    showGptOnPostBookingPage: z.boolean().optional(),
    showGptOnDashboardPage: z.boolean().optional(),
    showGptOnDetailsPage: z.boolean().optional(),
    allowedLastBookingDate: z.string().optional(),
    allowedFirstBookingDate: z.string().optional(),
    showCostOnChampionsPage: z.boolean().optional(),
    defaultEventFormat: z.string().optional(),
    isAsyncPossible: z.boolean().optional(),
    isGridViewToggleEnabled: z.boolean().optional(),
    isInventoryBasedOutdoorEnabled: z.boolean().optional(),
    showPreEventFormOnEtp: z.boolean().optional(),
    showOnlyAggregators: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {CreateChampionsConfigRequest} createChampionsConfigRequest
 * @property {string}
 * @property {string}
 * @property {any}
 * @property {any}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {any}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 */
export type CreateChampionsConfigRequest = z.infer<typeof createChampionsConfigRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createChampionsConfigRequestResponse = z.lazy(() => {
  return z
    .object({
      slug: z.string(),
      allowedConfirmItems: z.string().optional(),
      inPersonTat: z.any(),
      virtualTat: z.any(),
      charityFormLink: z.string().optional(),
      analyticsUrl: z.string().optional(),
      portalUrl: z.string().optional(),
      customBookingUrl: z.string().optional(),
      clientId: z.any(),
      showLogoOnChampionsPage: z.boolean().optional(),
      showGptOnPostBookingPage: z.boolean().optional(),
      showGptOnDashboardPage: z.boolean().optional(),
      showGptOnDetailsPage: z.boolean().optional(),
      allowedLastBookingDate: z.string().optional(),
      allowedFirstBookingDate: z.string().optional(),
      showCostOnChampionsPage: z.boolean().optional(),
      defaultEventFormat: z.string().optional(),
      isAsyncPossible: z.boolean().optional(),
      isGridViewToggleEnabled: z.boolean().optional(),
      isInventoryBasedOutdoorEnabled: z.boolean().optional(),
      showPreEventFormOnEtp: z.boolean().optional(),
      showOnlyAggregators: z.boolean().optional(),
    })
    .transform((data) => ({
      slug: data['slug'],
      allowedConfirmItems: data['allowedConfirmItems'],
      inPersonTat: data['inPersonTat'],
      virtualTat: data['virtualTat'],
      charityFormLink: data['charityFormLink'],
      analyticsUrl: data['analyticsUrl'],
      portalUrl: data['portalUrl'],
      customBookingUrl: data['customBookingUrl'],
      clientId: data['clientId'],
      showLogoOnChampionsPage: data['showLogoOnChampionsPage'],
      showGptOnPostBookingPage: data['showGptOnPostBookingPage'],
      showGptOnDashboardPage: data['showGptOnDashboardPage'],
      showGptOnDetailsPage: data['showGptOnDetailsPage'],
      allowedLastBookingDate: data['allowedLastBookingDate'],
      allowedFirstBookingDate: data['allowedFirstBookingDate'],
      showCostOnChampionsPage: data['showCostOnChampionsPage'],
      defaultEventFormat: data['defaultEventFormat'],
      isAsyncPossible: data['isAsyncPossible'],
      isGridViewToggleEnabled: data['isGridViewToggleEnabled'],
      isInventoryBasedOutdoorEnabled: data['isInventoryBasedOutdoorEnabled'],
      showPreEventFormOnEtp: data['showPreEventFormOnEtp'],
      showOnlyAggregators: data['showOnlyAggregators'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createChampionsConfigRequestRequest = z.lazy(() => {
  return z
    .object({
      slug: z.string(),
      allowedConfirmItems: z.string().optional(),
      inPersonTat: z.any(),
      virtualTat: z.any(),
      charityFormLink: z.string().optional(),
      analyticsUrl: z.string().optional(),
      portalUrl: z.string().optional(),
      customBookingUrl: z.string().optional(),
      clientId: z.any(),
      showLogoOnChampionsPage: z.boolean().optional(),
      showGptOnPostBookingPage: z.boolean().optional(),
      showGptOnDashboardPage: z.boolean().optional(),
      showGptOnDetailsPage: z.boolean().optional(),
      allowedLastBookingDate: z.string().optional(),
      allowedFirstBookingDate: z.string().optional(),
      showCostOnChampionsPage: z.boolean().optional(),
      defaultEventFormat: z.string().optional(),
      isAsyncPossible: z.boolean().optional(),
      isGridViewToggleEnabled: z.boolean().optional(),
      isInventoryBasedOutdoorEnabled: z.boolean().optional(),
      showPreEventFormOnEtp: z.boolean().optional(),
      showOnlyAggregators: z.boolean().optional(),
    })
    .transform((data) => ({
      slug: data['slug'],
      allowedConfirmItems: data['allowedConfirmItems'],
      inPersonTat: data['inPersonTat'],
      virtualTat: data['virtualTat'],
      charityFormLink: data['charityFormLink'],
      analyticsUrl: data['analyticsUrl'],
      portalUrl: data['portalUrl'],
      customBookingUrl: data['customBookingUrl'],
      clientId: data['clientId'],
      showLogoOnChampionsPage: data['showLogoOnChampionsPage'],
      showGptOnPostBookingPage: data['showGptOnPostBookingPage'],
      showGptOnDashboardPage: data['showGptOnDashboardPage'],
      showGptOnDetailsPage: data['showGptOnDetailsPage'],
      allowedLastBookingDate: data['allowedLastBookingDate'],
      allowedFirstBookingDate: data['allowedFirstBookingDate'],
      showCostOnChampionsPage: data['showCostOnChampionsPage'],
      defaultEventFormat: data['defaultEventFormat'],
      isAsyncPossible: data['isAsyncPossible'],
      isGridViewToggleEnabled: data['isGridViewToggleEnabled'],
      isInventoryBasedOutdoorEnabled: data['isInventoryBasedOutdoorEnabled'],
      showPreEventFormOnEtp: data['showPreEventFormOnEtp'],
      showOnlyAggregators: data['showOnlyAggregators'],
    }));
});
