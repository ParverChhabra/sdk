// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreateUserRequest,
  createUserRequest,
  createUserRequestRequest,
  createUserRequestResponse,
} from '../../common/create-user-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createCsmRequest = z.lazy(() => {
  return z.object({
    userId: z.string().optional(),
    user: createUserRequest.optional(),
    displayImageUrl: z.string(),
    meetingUrl: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateCsmRequest} createCsmRequest
 * @property {string}
 * @property {CreateUserRequest}
 * @property {string}
 * @property {string}
 */
export type CreateCsmRequest = z.infer<typeof createCsmRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createCsmRequestResponse = z.lazy(() => {
  return z
    .object({
      userId: z.string().optional(),
      user: createUserRequestResponse.optional(),
      displayImageUrl: z.string(),
      meetingUrl: z.string().optional(),
    })
    .transform((data) => ({
      userId: data['userId'],
      user: data['user'],
      displayImageUrl: data['displayImageUrl'],
      meetingUrl: data['meetingUrl'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createCsmRequestRequest = z.lazy(() => {
  return z
    .object({
      userId: z.string().optional(),
      user: createUserRequestRequest.optional(),
      displayImageUrl: z.string(),
      meetingUrl: z.string().optional(),
    })
    .transform((data) => ({
      userId: data['userId'],
      user: data['user'],
      displayImageUrl: data['displayImageUrl'],
      meetingUrl: data['meetingUrl'],
    }));
});
