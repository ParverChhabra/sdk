// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventCollateralRequest = z.lazy(() => {
  return z.object({
    eventId: z.string(),
    url: z.string(),
    collateralType: z.string(),
  });
});

/**
 *
 * @typedef  {CreateEventCollateralRequest} createEventCollateralRequest
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateEventCollateralRequest = z.infer<typeof createEventCollateralRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventCollateralRequestResponse = z.lazy(() => {
  return z
    .object({
      eventId: z.string(),
      url: z.string(),
      collateralType: z.string(),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      url: data['url'],
      collateralType: data['collateralType'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventCollateralRequestRequest = z.lazy(() => {
  return z
    .object({
      eventId: z.string(),
      url: z.string(),
      collateralType: z.string(),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      url: data['url'],
      collateralType: data['collateralType'],
    }));
});
