// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  CreateActivityPartnerAddressRequest,
  createActivityPartnerAddressRequest,
  createActivityPartnerAddressRequestRequest,
  createActivityPartnerAddressRequestResponse,
} from './create-activity-partner-address-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createActivityPartnerRequest = z.lazy(() => {
  return z.object({
    partnerId: z.string(),
    activityId: z.string(),
    impact: z.string().optional(),
    cost: z.number().optional(),
    bnfLanguage: z.string().optional(),
    bnfLocation: z.string().optional(),
    countryId: z.string(),
    cityId: z.string().optional(),
    address: createActivityPartnerAddressRequest.optional(),
    thumbnailUrl: z.string().optional(),
    variantIds: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {CreateActivityPartnerRequest} createActivityPartnerRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {CreateActivityPartnerAddressRequest}
 * @property {string}
 * @property {string[]}
 */
export type CreateActivityPartnerRequest = z.infer<typeof createActivityPartnerRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createActivityPartnerRequestResponse = z.lazy(() => {
  return z
    .object({
      partnerId: z.string(),
      activityId: z.string(),
      impact: z.string().optional(),
      cost: z.number().optional(),
      bnfLanguage: z.string().optional(),
      bnfLocation: z.string().optional(),
      countryId: z.string(),
      cityId: z.string().optional(),
      address: createActivityPartnerAddressRequestResponse.optional(),
      thumbnailUrl: z.string().optional(),
      variantIds: z.array(z.string()),
    })
    .transform((data) => ({
      partnerId: data['partnerId'],
      activityId: data['activityId'],
      impact: data['impact'],
      cost: data['cost'],
      bnfLanguage: data['bnfLanguage'],
      bnfLocation: data['bnfLocation'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      address: data['address'],
      thumbnailUrl: data['thumbnailUrl'],
      variantIds: data['variantIds'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createActivityPartnerRequestRequest = z.lazy(() => {
  return z
    .object({
      partnerId: z.string(),
      activityId: z.string(),
      impact: z.string().optional(),
      cost: z.number().optional(),
      bnfLanguage: z.string().optional(),
      bnfLocation: z.string().optional(),
      countryId: z.string(),
      cityId: z.string().optional(),
      address: createActivityPartnerAddressRequestRequest.optional(),
      thumbnailUrl: z.string().optional(),
      variantIds: z.array(z.string()),
    })
    .transform((data) => ({
      partnerId: data['partnerId'],
      activityId: data['activityId'],
      impact: data['impact'],
      cost: data['cost'],
      bnfLanguage: data['bnfLanguage'],
      bnfLocation: data['bnfLocation'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      address: data['address'],
      thumbnailUrl: data['thumbnailUrl'],
      variantIds: data['variantIds'],
    }));
});
