// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  UpdateActivityPartnerAddressRequest,
  updateActivityPartnerAddressRequest,
  updateActivityPartnerAddressRequestRequest,
  updateActivityPartnerAddressRequestResponse,
} from './update-activity-partner-address-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateActivityPartnerRequest = z.lazy(() => {
  return z.object({
    impact: z.string().optional(),
    bnfLanguage: z.string().optional(),
    cost: z.number().optional(),
    bnfLocation: z.string().optional(),
    countryId: z.string().optional(),
    cityId: z.string().optional(),
    address: updateActivityPartnerAddressRequest.optional(),
    thumbnailUrl: z.string().optional(),
  });
});

/**
 *
 * @typedef  {UpdateActivityPartnerRequest} updateActivityPartnerRequest
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {string} - Country ID for the event
 * @property {string} - City ID for the event
 * @property {UpdateActivityPartnerAddressRequest}
 * @property {string}
 */
export type UpdateActivityPartnerRequest = z.infer<typeof updateActivityPartnerRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateActivityPartnerRequestResponse = z.lazy(() => {
  return z
    .object({
      impact: z.string().optional(),
      bnfLanguage: z.string().optional(),
      cost: z.number().optional(),
      bnfLocation: z.string().optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      address: updateActivityPartnerAddressRequestResponse.optional(),
      thumbnailUrl: z.string().optional(),
    })
    .transform((data) => ({
      impact: data['impact'],
      bnfLanguage: data['bnfLanguage'],
      cost: data['cost'],
      bnfLocation: data['bnfLocation'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      address: data['address'],
      thumbnailUrl: data['thumbnailUrl'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateActivityPartnerRequestRequest = z.lazy(() => {
  return z
    .object({
      impact: z.string().optional(),
      bnfLanguage: z.string().optional(),
      cost: z.number().optional(),
      bnfLocation: z.string().optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      address: updateActivityPartnerAddressRequestRequest.optional(),
      thumbnailUrl: z.string().optional(),
    })
    .transform((data) => ({
      impact: data['impact'],
      bnfLanguage: data['bnfLanguage'],
      cost: data['cost'],
      bnfLocation: data['bnfLocation'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      address: data['address'],
      thumbnailUrl: data['thumbnailUrl'],
    }));
});
