// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventHostFulfillmentRequest = z.lazy(() => {
  return z.object({
    eventNotes: z.string().optional(),
    aboutActivityScriptUrl: z.string().optional(),
    settingUpActivityScriptUrl: z.string().optional(),
    instructionalVideoUrl: z.string().optional(),
    photosUploadFolderUrl: z.string().optional(),
    photosViewFolderUrl: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateEventHostFulfillmentRequest} createEventHostFulfillmentRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateEventHostFulfillmentRequest = z.infer<typeof createEventHostFulfillmentRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventHostFulfillmentRequestResponse = z.lazy(() => {
  return z
    .object({
      eventNotes: z.string().optional(),
      aboutActivityScriptUrl: z.string().optional(),
      settingUpActivityScriptUrl: z.string().optional(),
      instructionalVideoUrl: z.string().optional(),
      photosUploadFolderUrl: z.string().optional(),
      photosViewFolderUrl: z.string().optional(),
    })
    .transform((data) => ({
      eventNotes: data['eventNotes'],
      aboutActivityScriptUrl: data['aboutActivityScriptUrl'],
      settingUpActivityScriptUrl: data['settingUpActivityScriptUrl'],
      instructionalVideoUrl: data['instructionalVideoUrl'],
      photosUploadFolderUrl: data['photosUploadFolderUrl'],
      photosViewFolderUrl: data['photosViewFolderUrl'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventHostFulfillmentRequestRequest = z.lazy(() => {
  return z
    .object({
      eventNotes: z.string().optional(),
      aboutActivityScriptUrl: z.string().optional(),
      settingUpActivityScriptUrl: z.string().optional(),
      instructionalVideoUrl: z.string().optional(),
      photosUploadFolderUrl: z.string().optional(),
      photosViewFolderUrl: z.string().optional(),
    })
    .transform((data) => ({
      eventNotes: data['eventNotes'],
      aboutActivityScriptUrl: data['aboutActivityScriptUrl'],
      settingUpActivityScriptUrl: data['settingUpActivityScriptUrl'],
      instructionalVideoUrl: data['instructionalVideoUrl'],
      photosUploadFolderUrl: data['photosUploadFolderUrl'],
      photosViewFolderUrl: data['photosViewFolderUrl'],
    }));
});
