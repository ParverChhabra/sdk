// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  UpdateUserRequest,
  updateUserRequest,
  updateUserRequestRequest,
  updateUserRequestResponse,
} from '../../common/update-user-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateProgramManagerRequest = z.lazy(() => {
  return z.object({
    user: updateUserRequest.optional(),
    displayImageUrl: z.string().optional(),
    chatLink: z.string(),
  });
});

/**
 *
 * @typedef  {UpdateProgramManagerRequest} updateProgramManagerRequest
 * @property {UpdateUserRequest}
 * @property {string}
 * @property {string}
 */
export type UpdateProgramManagerRequest = z.infer<typeof updateProgramManagerRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateProgramManagerRequestResponse = z.lazy(() => {
  return z
    .object({
      user: updateUserRequestResponse.optional(),
      displayImageUrl: z.string().optional(),
      chatLink: z.string(),
    })
    .transform((data) => ({
      user: data['user'],
      displayImageUrl: data['displayImageUrl'],
      chatLink: data['chatLink'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateProgramManagerRequestRequest = z.lazy(() => {
  return z
    .object({
      user: updateUserRequestRequest.optional(),
      displayImageUrl: z.string().optional(),
      chatLink: z.string(),
    })
    .transform((data) => ({
      user: data['user'],
      displayImageUrl: data['displayImageUrl'],
      chatLink: data['chatLink'],
    }));
});
