// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const oppTagRequest = z.lazy(() => {
  return z.object({
    clientTagIds: z.array(z.string()),
  });
});

/**
 *
 * @typedef  {OppTagRequest} oppTagRequest
 * @property {string[]}
 */
export type OppTagRequest = z.infer<typeof oppTagRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const oppTagRequestResponse = z.lazy(() => {
  return z
    .object({
      clientTagIds: z.array(z.string()),
    })
    .transform((data) => ({
      clientTagIds: data['clientTagIds'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const oppTagRequestRequest = z.lazy(() => {
  return z
    .object({
      clientTagIds: z.array(z.string()),
    })
    .transform((data) => ({
      clientTagIds: data['clientTagIds'],
    }));
});
