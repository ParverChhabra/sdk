// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createClientRequest = z.lazy(() => {
  return z.object({
    clientContext: z.any(),
  });
});

/**
 *
 * @typedef  {CreateClientRequest} createClientRequest
 * @property {any}
 */
export type CreateClientRequest = z.infer<typeof createClientRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createClientRequestResponse = z.lazy(() => {
  return z
    .object({
      clientContext: z.any(),
    })
    .transform((data) => ({
      clientContext: data['clientContext'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createClientRequestRequest = z.lazy(() => {
  return z
    .object({
      clientContext: z.any(),
    })
    .transform((data) => ({
      clientContext: data['clientContext'],
    }));
});
