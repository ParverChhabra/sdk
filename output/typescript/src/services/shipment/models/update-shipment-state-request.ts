// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Status, status } from './status';
import {
  UpdateShipmentStateRequestCarrier,
  updateShipmentStateRequestCarrier,
} from './update-shipment-state-request-carrier';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateShipmentStateRequest = z.lazy(() => {
  return z.object({
    status: status.optional(),
    deliveryAcknowledgement: z.string().optional(),
    deliveryProofUrl: z.string().optional(),
    expectedDeliveryDate: z.string().optional(),
    deliveryDate: z.string().optional(),
    trackingId: z.string().optional(),
    trackingLink: z.string().optional(),
    carrier: updateShipmentStateRequestCarrier.optional(),
    isQrCodeStuck: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {UpdateShipmentStateRequest} updateShipmentStateRequest
 * @property {Status} - New status of the shipment
 * @property {string} - Delivery acknowledgement information
 * @property {string} - URL to the delivery proof document
 * @property {string} - Expected delivery date
 * @property {string} - Delivery date
 * @property {string} - Tracking ID of the shipment
 * @property {string} - Link to track the shipment
 * @property {UpdateShipmentStateRequestCarrier} - Carrier for the shipment
 * @property {boolean} - Whether the QR code is stuck with the shipment
 */
export type UpdateShipmentStateRequest = z.infer<typeof updateShipmentStateRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateShipmentStateRequestResponse = z.lazy(() => {
  return z
    .object({
      status: status.optional(),
      deliveryAcknowledgement: z.string().optional(),
      deliveryProofUrl: z.string().optional(),
      expectedDeliveryDate: z.string().optional(),
      deliveryDate: z.string().optional(),
      trackingId: z.string().optional(),
      trackingLink: z.string().optional(),
      carrier: updateShipmentStateRequestCarrier.optional(),
      isQRCodeStuck: z.boolean().optional(),
    })
    .transform((data) => ({
      status: data['status'],
      deliveryAcknowledgement: data['deliveryAcknowledgement'],
      deliveryProofUrl: data['deliveryProofUrl'],
      expectedDeliveryDate: data['expectedDeliveryDate'],
      deliveryDate: data['deliveryDate'],
      trackingId: data['trackingId'],
      trackingLink: data['trackingLink'],
      carrier: data['carrier'],
      isQrCodeStuck: data['isQRCodeStuck'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateShipmentStateRequestRequest = z.lazy(() => {
  return z
    .object({
      status: status.optional(),
      deliveryAcknowledgement: z.string().optional(),
      deliveryProofUrl: z.string().optional(),
      expectedDeliveryDate: z.string().optional(),
      deliveryDate: z.string().optional(),
      trackingId: z.string().optional(),
      trackingLink: z.string().optional(),
      carrier: updateShipmentStateRequestCarrier.optional(),
      isQrCodeStuck: z.boolean().optional(),
    })
    .transform((data) => ({
      status: data['status'],
      deliveryAcknowledgement: data['deliveryAcknowledgement'],
      deliveryProofUrl: data['deliveryProofUrl'],
      expectedDeliveryDate: data['expectedDeliveryDate'],
      deliveryDate: data['deliveryDate'],
      trackingId: data['trackingId'],
      trackingLink: data['trackingLink'],
      carrier: data['carrier'],
      isQRCodeStuck: data['isQrCodeStuck'],
    }));
});
