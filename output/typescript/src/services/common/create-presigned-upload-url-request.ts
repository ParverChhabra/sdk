// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createPresignedUploadUrlRequest = z.lazy(() => {
  return z.object({
    bucket: z.string(),
    key: z.string(),
    filePath: z.string(),
  });
});

/**
 *
 * @typedef  {CreatePresignedUploadUrlRequest} createPresignedUploadUrlRequest
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreatePresignedUploadUrlRequest = z.infer<typeof createPresignedUploadUrlRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createPresignedUploadUrlRequestResponse = z.lazy(() => {
  return z
    .object({
      bucket: z.string(),
      key: z.string(),
      filePath: z.string(),
    })
    .transform((data) => ({
      bucket: data['bucket'],
      key: data['key'],
      filePath: data['filePath'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createPresignedUploadUrlRequestRequest = z.lazy(() => {
  return z
    .object({
      bucket: z.string(),
      key: z.string(),
      filePath: z.string(),
    })
    .transform((data) => ({
      bucket: data['bucket'],
      key: data['key'],
      filePath: data['filePath'],
    }));
});
