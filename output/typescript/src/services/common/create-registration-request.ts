// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createRegistrationRequest = z.lazy(() => {
  return z.object({
    customerEmail: z.string(),
    eventId: z.string(),
    attendanceMarkedAt: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateRegistrationRequest} createRegistrationRequest
 * @property {string} - Email of the customer registering for the event
 * @property {string} - ID of the event the customer is registering for
 * @property {string} - Timestamp when the attendance was marked
 */
export type CreateRegistrationRequest = z.infer<typeof createRegistrationRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createRegistrationRequestResponse = z.lazy(() => {
  return z
    .object({
      customerEmail: z.string(),
      eventId: z.string(),
      attendanceMarkedAt: z.string().optional(),
    })
    .transform((data) => ({
      customerEmail: data['customerEmail'],
      eventId: data['eventId'],
      attendanceMarkedAt: data['attendanceMarkedAt'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createRegistrationRequestRequest = z.lazy(() => {
  return z
    .object({
      customerEmail: z.string(),
      eventId: z.string(),
      attendanceMarkedAt: z.string().optional(),
    })
    .transform((data) => ({
      customerEmail: data['customerEmail'],
      eventId: data['eventId'],
      attendanceMarkedAt: data['attendanceMarkedAt'],
    }));
});
