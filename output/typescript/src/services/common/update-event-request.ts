// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  UpdateEventChampionRequest,
  updateEventChampionRequest,
  updateEventChampionRequestRequest,
  updateEventChampionRequestResponse,
} from '../event/models/update-event-champion-request';
import {
  CreateMaterialItemRequest,
  createMaterialItemRequest,
  createMaterialItemRequestRequest,
  createMaterialItemRequestResponse,
} from './create-material-item-request';
import {
  UpdateEventAddressRequest,
  updateEventAddressRequest,
  updateEventAddressRequestRequest,
  updateEventAddressRequestResponse,
} from '../event/models/update-event-address-request';
import {
  UpdateBookingSessionRequest,
  updateBookingSessionRequest,
  updateBookingSessionRequestRequest,
  updateBookingSessionRequestResponse,
} from '../event/models/update-booking-session-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEventRequest = z.lazy(() => {
  return z.object({
    partnerId: z.string().optional(),
    champion: updateEventChampionRequest.optional(),
    countryId: z.string().optional(),
    cityId: z.string().optional(),
    startTimeStamp: z.string().optional(),
    endTimeStamp: z.string().optional(),
    timezone: z.string().optional(),
    name: z.string().optional(),
    prerequisites: z.string().optional(),
    roleOfVolunteer: z.string().optional(),
    kitDescription: z.array(createMaterialItemRequest).optional(),
    materialCost: z.number().lte(99999.99999).optional(),
    kitImgUrls: z.array(z.string()).optional(),
    itinerary: z.array(z.any()).optional(),
    language: z.string().optional(),
    csmId: z.string().optional(),
    programManagerId: z.string().optional(),
    expectedVolunteerCount: z.number().optional(),
    tags: z.array(z.string()).optional(),
    othersTagDescription: z.string().min(1).optional(),
    isdCode: z.string().optional(),
    address: updateEventAddressRequest.optional(),
    customCalendarDescription: z.string().min(1).optional(),
    customCalendarTitle: z.string().min(1).optional(),
    bookingSession: updateBookingSessionRequest.optional(),
    submissionDeadline: z.number().optional(),
  });
});

/**
 *
 * @typedef  {UpdateEventRequest} updateEventRequest
 * @property {string} - Partner ID for the event
 * @property {UpdateEventChampionRequest}
 * @property {string} - Country ID for the event
 * @property {string} - City ID for the event
 * @property {string} - Start timestamp of the event
 * @property {string} - End timestamp of the event
 * @property {string} - Timezone of the event
 * @property {string} - Name of the event
 * @property {string} - Prerequisites for the event
 * @property {string} - Role of volunteer in the event
 * @property {CreateMaterialItemRequest[]} - Kit description for the event
 * @property {number} - Material cost for the event
 * @property {string[]} - Kit image URLs for the event
 * @property {any[]} - Itinerary for the event
 * @property {string} - Language of the event
 * @property {string} - CSM ID for the event
 * @property {string} - Program Manager ID for the event
 * @property {number} - Expected volunteer count for the event
 * @property {string[]} - Tags for the event
 * @property {string} - Others Tag description for the event
 * @property {string} - ISD code for the event
 * @property {UpdateEventAddressRequest}
 * @property {string} - Custom calendar description for the event
 * @property {string} - Custom calendar title for the event
 * @property {UpdateBookingSessionRequest}
 * @property {number}
 */
export type UpdateEventRequest = z.infer<typeof updateEventRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventRequestResponse = z.lazy(() => {
  return z
    .object({
      partnerId: z.string().optional(),
      champion: updateEventChampionRequestResponse.optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      startTimeStamp: z.string().optional(),
      endTimeStamp: z.string().optional(),
      timezone: z.string().optional(),
      name: z.string().optional(),
      prerequisites: z.string().optional(),
      roleOfVolunteer: z.string().optional(),
      kitDescription: z.array(createMaterialItemRequestResponse).optional(),
      materialCost: z.number().lte(99999.99999).optional(),
      kitImgUrls: z.array(z.string()).optional(),
      itinerary: z.array(z.any()).optional(),
      language: z.string().optional(),
      csmId: z.string().optional(),
      programManagerId: z.string().optional(),
      expectedVolunteerCount: z.number().optional(),
      tags: z.array(z.string()).optional(),
      othersTagDescription: z.string().min(1).optional(),
      isdCode: z.string().optional(),
      address: updateEventAddressRequestResponse.optional(),
      customCalendarDescription: z.string().min(1).optional(),
      customCalendarTitle: z.string().min(1).optional(),
      bookingSession: updateBookingSessionRequestResponse.optional(),
      submissionDeadline: z.number().optional(),
    })
    .transform((data) => ({
      partnerId: data['partnerId'],
      champion: data['champion'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      name: data['name'],
      prerequisites: data['prerequisites'],
      roleOfVolunteer: data['roleOfVolunteer'],
      kitDescription: data['kitDescription'],
      materialCost: data['materialCost'],
      kitImgUrls: data['kitImgUrls'],
      itinerary: data['itinerary'],
      language: data['language'],
      csmId: data['csmId'],
      programManagerId: data['programManagerId'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
      tags: data['tags'],
      othersTagDescription: data['othersTagDescription'],
      isdCode: data['isdCode'],
      address: data['address'],
      customCalendarDescription: data['customCalendarDescription'],
      customCalendarTitle: data['customCalendarTitle'],
      bookingSession: data['bookingSession'],
      submissionDeadline: data['submissionDeadline'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEventRequestRequest = z.lazy(() => {
  return z
    .object({
      partnerId: z.string().optional(),
      champion: updateEventChampionRequestRequest.optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      startTimeStamp: z.string().optional(),
      endTimeStamp: z.string().optional(),
      timezone: z.string().optional(),
      name: z.string().optional(),
      prerequisites: z.string().optional(),
      roleOfVolunteer: z.string().optional(),
      kitDescription: z.array(createMaterialItemRequestRequest).optional(),
      materialCost: z.number().lte(99999.99999).optional(),
      kitImgUrls: z.array(z.string()).optional(),
      itinerary: z.array(z.any()).optional(),
      language: z.string().optional(),
      csmId: z.string().optional(),
      programManagerId: z.string().optional(),
      expectedVolunteerCount: z.number().optional(),
      tags: z.array(z.string()).optional(),
      othersTagDescription: z.string().min(1).optional(),
      isdCode: z.string().optional(),
      address: updateEventAddressRequestRequest.optional(),
      customCalendarDescription: z.string().min(1).optional(),
      customCalendarTitle: z.string().min(1).optional(),
      bookingSession: updateBookingSessionRequestRequest.optional(),
      submissionDeadline: z.number().optional(),
    })
    .transform((data) => ({
      partnerId: data['partnerId'],
      champion: data['champion'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      startTimeStamp: data['startTimeStamp'],
      endTimeStamp: data['endTimeStamp'],
      timezone: data['timezone'],
      name: data['name'],
      prerequisites: data['prerequisites'],
      roleOfVolunteer: data['roleOfVolunteer'],
      kitDescription: data['kitDescription'],
      materialCost: data['materialCost'],
      kitImgUrls: data['kitImgUrls'],
      itinerary: data['itinerary'],
      language: data['language'],
      csmId: data['csmId'],
      programManagerId: data['programManagerId'],
      expectedVolunteerCount: data['expectedVolunteerCount'],
      tags: data['tags'],
      othersTagDescription: data['othersTagDescription'],
      isdCode: data['isdCode'],
      address: data['address'],
      customCalendarDescription: data['customCalendarDescription'],
      customCalendarTitle: data['customCalendarTitle'],
      bookingSession: data['bookingSession'],
      submissionDeadline: data['submissionDeadline'],
    }));
});
