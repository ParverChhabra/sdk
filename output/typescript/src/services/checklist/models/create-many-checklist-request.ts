// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createManyChecklistRequest = z.lazy(() => {
  return z.object({
    type: z.string(),
    clientId: z.string().optional(),
    opportunityId: z.string().optional(),
    eventId: z.string().optional(),
    label: z.string(),
    description: z.string(),
    formats: z.array(z.string()).optional(),
    section: z.string().optional(),
    key: z.string(),
    isDefault: z.boolean(),
  });
});

/**
 *
 * @typedef  {CreateManyChecklistRequest} createManyChecklistRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string[]}
 * @property {string}
 * @property {string}
 * @property {boolean}
 */
export type CreateManyChecklistRequest = z.infer<typeof createManyChecklistRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createManyChecklistRequestResponse = z.lazy(() => {
  return z
    .object({
      type: z.string(),
      clientId: z.string().optional(),
      opportunityId: z.string().optional(),
      eventId: z.string().optional(),
      label: z.string(),
      description: z.string(),
      formats: z.array(z.string()).optional(),
      section: z.string().optional(),
      key: z.string(),
      isDefault: z.boolean(),
    })
    .transform((data) => ({
      type: data['type'],
      clientId: data['clientId'],
      opportunityId: data['opportunityId'],
      eventId: data['eventId'],
      label: data['label'],
      description: data['description'],
      formats: data['formats'],
      section: data['section'],
      key: data['key'],
      isDefault: data['isDefault'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createManyChecklistRequestRequest = z.lazy(() => {
  return z
    .object({
      type: z.string(),
      clientId: z.string().optional(),
      opportunityId: z.string().optional(),
      eventId: z.string().optional(),
      label: z.string(),
      description: z.string(),
      formats: z.array(z.string()).optional(),
      section: z.string().optional(),
      key: z.string(),
      isDefault: z.boolean(),
    })
    .transform((data) => ({
      type: data['type'],
      clientId: data['clientId'],
      opportunityId: data['opportunityId'],
      eventId: data['eventId'],
      label: data['label'],
      description: data['description'],
      formats: data['formats'],
      section: data['section'],
      key: data['key'],
      isDefault: data['isDefault'],
    }));
});
