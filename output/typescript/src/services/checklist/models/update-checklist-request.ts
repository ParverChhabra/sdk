// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateChecklistRequest = z.lazy(() => {
  return z.object({
    label: z.string(),
    description: z.string(),
  });
});

/**
 *
 * @typedef  {UpdateChecklistRequest} updateChecklistRequest
 * @property {string}
 * @property {string}
 */
export type UpdateChecklistRequest = z.infer<typeof updateChecklistRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateChecklistRequestResponse = z.lazy(() => {
  return z
    .object({
      label: z.string(),
      description: z.string(),
    })
    .transform((data) => ({
      label: data['label'],
      description: data['description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateChecklistRequestRequest = z.lazy(() => {
  return z
    .object({
      label: z.string(),
      description: z.string(),
    })
    .transform((data) => ({
      label: data['label'],
      description: data['description'],
    }));
});
