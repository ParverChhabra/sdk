// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventHostFeedbackRequest = z.lazy(() => {
  return z.object({
    participantCount: z.number(),
    kitsCreated: z.number().optional(),
    pollsConducted: z.boolean().optional(),
    pollsConductedDescription: z.string().optional(),
    pollsDataFileUrl: z.string().optional(),
    eventExperience: z.string(),
    goodfies: z.array(z.string()).optional(),
    goodfieCaptured: z.boolean().optional(),
    goodfieCaptureDescription: z.string().optional(),
    eventRecorded: z.boolean().optional(),
    eventRecordingFileUrl: z.string().optional(),
    eventRecordingDescription: z.string().optional(),
    eventRating: z.number().optional(),
    eventContentRating: z.number().optional(),
    isLinksWorking: z.boolean().optional(),
    isEventImagesUploaded: z.boolean().optional(),
    eventImagesUploadIssue: z.string().optional(),
    isPostEventShippingLabelPrinted: z.boolean().optional(),
    postEventShippingIssue: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CreateEventHostFeedbackRequest} createEventHostFeedbackRequest
 * @property {number}
 * @property {number}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string[]}
 * @property {boolean}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {boolean}
 * @property {boolean}
 * @property {string}
 * @property {boolean}
 * @property {string}
 */
export type CreateEventHostFeedbackRequest = z.infer<typeof createEventHostFeedbackRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventHostFeedbackRequestResponse = z.lazy(() => {
  return z
    .object({
      participantCount: z.number(),
      kitsCreated: z.number().optional(),
      pollsConducted: z.boolean().optional(),
      pollsConductedDescription: z.string().optional(),
      pollsDataFileUrl: z.string().optional(),
      eventExperience: z.string(),
      goodfies: z.array(z.string()).optional(),
      goodfieCaptured: z.boolean().optional(),
      goodfieCaptureDescription: z.string().optional(),
      eventRecorded: z.boolean().optional(),
      eventRecordingFileUrl: z.string().optional(),
      eventRecordingDescription: z.string().optional(),
      eventRating: z.number().optional(),
      eventContentRating: z.number().optional(),
      isLinksWorking: z.boolean().optional(),
      isEventImagesUploaded: z.boolean().optional(),
      eventImagesUploadIssue: z.string().optional(),
      isPostEventShippingLabelPrinted: z.boolean().optional(),
      postEventShippingIssue: z.string().optional(),
    })
    .transform((data) => ({
      participantCount: data['participantCount'],
      kitsCreated: data['kitsCreated'],
      pollsConducted: data['pollsConducted'],
      pollsConductedDescription: data['pollsConductedDescription'],
      pollsDataFileUrl: data['pollsDataFileUrl'],
      eventExperience: data['eventExperience'],
      goodfies: data['goodfies'],
      goodfieCaptured: data['goodfieCaptured'],
      goodfieCaptureDescription: data['goodfieCaptureDescription'],
      eventRecorded: data['eventRecorded'],
      eventRecordingFileUrl: data['eventRecordingFileUrl'],
      eventRecordingDescription: data['eventRecordingDescription'],
      eventRating: data['eventRating'],
      eventContentRating: data['eventContentRating'],
      isLinksWorking: data['isLinksWorking'],
      isEventImagesUploaded: data['isEventImagesUploaded'],
      eventImagesUploadIssue: data['eventImagesUploadIssue'],
      isPostEventShippingLabelPrinted: data['isPostEventShippingLabelPrinted'],
      postEventShippingIssue: data['postEventShippingIssue'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventHostFeedbackRequestRequest = z.lazy(() => {
  return z
    .object({
      participantCount: z.number(),
      kitsCreated: z.number().optional(),
      pollsConducted: z.boolean().optional(),
      pollsConductedDescription: z.string().optional(),
      pollsDataFileUrl: z.string().optional(),
      eventExperience: z.string(),
      goodfies: z.array(z.string()).optional(),
      goodfieCaptured: z.boolean().optional(),
      goodfieCaptureDescription: z.string().optional(),
      eventRecorded: z.boolean().optional(),
      eventRecordingFileUrl: z.string().optional(),
      eventRecordingDescription: z.string().optional(),
      eventRating: z.number().optional(),
      eventContentRating: z.number().optional(),
      isLinksWorking: z.boolean().optional(),
      isEventImagesUploaded: z.boolean().optional(),
      eventImagesUploadIssue: z.string().optional(),
      isPostEventShippingLabelPrinted: z.boolean().optional(),
      postEventShippingIssue: z.string().optional(),
    })
    .transform((data) => ({
      participantCount: data['participantCount'],
      kitsCreated: data['kitsCreated'],
      pollsConducted: data['pollsConducted'],
      pollsConductedDescription: data['pollsConductedDescription'],
      pollsDataFileUrl: data['pollsDataFileUrl'],
      eventExperience: data['eventExperience'],
      goodfies: data['goodfies'],
      goodfieCaptured: data['goodfieCaptured'],
      goodfieCaptureDescription: data['goodfieCaptureDescription'],
      eventRecorded: data['eventRecorded'],
      eventRecordingFileUrl: data['eventRecordingFileUrl'],
      eventRecordingDescription: data['eventRecordingDescription'],
      eventRating: data['eventRating'],
      eventContentRating: data['eventContentRating'],
      isLinksWorking: data['isLinksWorking'],
      isEventImagesUploaded: data['isEventImagesUploaded'],
      eventImagesUploadIssue: data['eventImagesUploadIssue'],
      isPostEventShippingLabelPrinted: data['isPostEventShippingLabelPrinted'],
      postEventShippingIssue: data['postEventShippingIssue'],
    }));
});
