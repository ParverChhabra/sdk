// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateHostRequest = z.lazy(() => {
  return z.object({
    description: z.string().optional(),
    secondaryEmails: z.string().optional(),
    profileImageUrl: z.string().optional(),
    meetingUrl: z.string().optional(),
    communicationAddress: z.any().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    displayName: z.string().optional(),
    pronouns: z.string().optional(),
    funFact: z.string().optional(),
    accomplishments: z.string().optional(),
    languages: z.string().optional(),
    countries: z.string().optional(),
    level: z.string().optional(),
    focusAreas: z.string().optional(),
    activityFormatAvailability: z.string().optional(),
    nationality: z.string().optional(),
    primaryLanguage: z.string().optional(),
    preferredActivityTypes: z.string().optional(),
    resumeUrl: z.string().optional(),
    comments: z.string().optional(),
    isdCode: z.string().optional(),
    phoneNumber: z.string().optional(),
    dateOfBirth: z.string().optional(),
    countryId: z.string().optional(),
    cityId: z.string().optional(),
    meetingPlatforms: z.array(z.string()).optional(),
  });
});

/**
 *
 * @typedef  {UpdateHostRequest} updateHostRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {any}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string[]}
 */
export type UpdateHostRequest = z.infer<typeof updateHostRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateHostRequestResponse = z.lazy(() => {
  return z
    .object({
      description: z.string().optional(),
      secondaryEmails: z.string().optional(),
      profileImageUrl: z.string().optional(),
      meetingUrl: z.string().optional(),
      communicationAddress: z.any().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      displayName: z.string().optional(),
      pronouns: z.string().optional(),
      funFact: z.string().optional(),
      accomplishments: z.string().optional(),
      languages: z.string().optional(),
      countries: z.string().optional(),
      level: z.string().optional(),
      focusAreas: z.string().optional(),
      activityFormatAvailability: z.string().optional(),
      nationality: z.string().optional(),
      primaryLanguage: z.string().optional(),
      preferredActivityTypes: z.string().optional(),
      resumeUrl: z.string().optional(),
      comments: z.string().optional(),
      isdCode: z.string().optional(),
      phoneNumber: z.string().optional(),
      dateOfBirth: z.string().optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      meetingPlatforms: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      description: data['description'],
      secondaryEmails: data['secondaryEmails'],
      profileImageUrl: data['profileImageUrl'],
      meetingUrl: data['meetingUrl'],
      communicationAddress: data['communicationAddress'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      displayName: data['displayName'],
      pronouns: data['pronouns'],
      funFact: data['funFact'],
      accomplishments: data['accomplishments'],
      languages: data['languages'],
      countries: data['countries'],
      level: data['level'],
      focusAreas: data['focusAreas'],
      activityFormatAvailability: data['activityFormatAvailability'],
      nationality: data['nationality'],
      primaryLanguage: data['primaryLanguage'],
      preferredActivityTypes: data['preferredActivityTypes'],
      resumeUrl: data['resumeUrl'],
      comments: data['comments'],
      isdCode: data['isdCode'],
      phoneNumber: data['phoneNumber'],
      dateOfBirth: data['dateOfBirth'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      meetingPlatforms: data['meetingPlatforms'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateHostRequestRequest = z.lazy(() => {
  return z
    .object({
      description: z.string().optional(),
      secondaryEmails: z.string().optional(),
      profileImageUrl: z.string().optional(),
      meetingUrl: z.string().optional(),
      communicationAddress: z.any().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      displayName: z.string().optional(),
      pronouns: z.string().optional(),
      funFact: z.string().optional(),
      accomplishments: z.string().optional(),
      languages: z.string().optional(),
      countries: z.string().optional(),
      level: z.string().optional(),
      focusAreas: z.string().optional(),
      activityFormatAvailability: z.string().optional(),
      nationality: z.string().optional(),
      primaryLanguage: z.string().optional(),
      preferredActivityTypes: z.string().optional(),
      resumeUrl: z.string().optional(),
      comments: z.string().optional(),
      isdCode: z.string().optional(),
      phoneNumber: z.string().optional(),
      dateOfBirth: z.string().optional(),
      countryId: z.string().optional(),
      cityId: z.string().optional(),
      meetingPlatforms: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      description: data['description'],
      secondaryEmails: data['secondaryEmails'],
      profileImageUrl: data['profileImageUrl'],
      meetingUrl: data['meetingUrl'],
      communicationAddress: data['communicationAddress'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      displayName: data['displayName'],
      pronouns: data['pronouns'],
      funFact: data['funFact'],
      accomplishments: data['accomplishments'],
      languages: data['languages'],
      countries: data['countries'],
      level: data['level'],
      focusAreas: data['focusAreas'],
      activityFormatAvailability: data['activityFormatAvailability'],
      nationality: data['nationality'],
      primaryLanguage: data['primaryLanguage'],
      preferredActivityTypes: data['preferredActivityTypes'],
      resumeUrl: data['resumeUrl'],
      comments: data['comments'],
      isdCode: data['isdCode'],
      phoneNumber: data['phoneNumber'],
      dateOfBirth: data['dateOfBirth'],
      countryId: data['countryId'],
      cityId: data['cityId'],
      meetingPlatforms: data['meetingPlatforms'],
    }));
});
