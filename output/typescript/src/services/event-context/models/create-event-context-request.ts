// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEventContextRequest = z.lazy(() => {
  return z.object({
    eventId: z.string(),
    team: z.string(),
    context: z.string(),
  });
});

/**
 *
 * @typedef  {CreateEventContextRequest} createEventContextRequest
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateEventContextRequest = z.infer<typeof createEventContextRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventContextRequestResponse = z.lazy(() => {
  return z
    .object({
      eventId: z.string(),
      team: z.string(),
      context: z.string(),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      team: data['team'],
      context: data['context'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEventContextRequestRequest = z.lazy(() => {
  return z
    .object({
      eventId: z.string(),
      team: z.string(),
      context: z.string(),
    })
    .transform((data) => ({
      eventId: data['eventId'],
      team: data['team'],
      context: data['context'],
    }));
});
