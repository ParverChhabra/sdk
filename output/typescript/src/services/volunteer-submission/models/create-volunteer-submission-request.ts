// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createVolunteerSubmissionRequest = z.lazy(() => {
  return z.object({
    email: z.string(),
    submissionLinks: z.string(),
    additionalMessage: z.string().optional(),
    eventId: z.string(),
  });
});

/**
 *
 * @typedef  {CreateVolunteerSubmissionRequest} createVolunteerSubmissionRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type CreateVolunteerSubmissionRequest = z.infer<typeof createVolunteerSubmissionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createVolunteerSubmissionRequestResponse = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      submissionLinks: z.string(),
      additionalMessage: z.string().optional(),
      eventId: z.string(),
    })
    .transform((data) => ({
      email: data['email'],
      submissionLinks: data['submissionLinks'],
      additionalMessage: data['additionalMessage'],
      eventId: data['eventId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createVolunteerSubmissionRequestRequest = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      submissionLinks: z.string(),
      additionalMessage: z.string().optional(),
      eventId: z.string(),
    })
    .transform((data) => ({
      email: data['email'],
      submissionLinks: data['submissionLinks'],
      additionalMessage: data['additionalMessage'],
      eventId: data['eventId'],
    }));
});
